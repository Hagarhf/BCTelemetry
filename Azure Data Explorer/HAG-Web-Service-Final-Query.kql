//================================================================
// HAG Web Service API - Dashboard Query with Function Names
//================================================================
// Extracts function name from endpoint field in customDimensions
// Pattern: ".../Microsoft.NAV.functionName"
//================================================================

let TimeRange = 24h;
traces
| where timestamp > ago(TimeRange)
| extend alObjectId = tostring(customDimensions.alObjectId)
| where alObjectId == "80107"
| extend
    endpoint = tostring(customDimensions.endpoint),
    executionTimeMs = toreal(totimespan(customDimensions.serverExecutionTime))/10000
// Extract function name from endpoint
// Example: "stkweb/.../Microsoft.NAV.getInvoices" -> "getInvoices"
| extend FunctionName = extract(@"Microsoft\.NAV\.(\w+)", 1, endpoint)
| where isnotempty(FunctionName)
| summarize
    CallCount = count(),
    AvgMs = round(avg(executionTimeMs), 2),
    P95Ms = round(percentile(executionTimeMs, 95), 2),
    MaxMs = round(max(executionTimeMs), 2),
    ErrorCount = countif(severityLevel >= 3),
    LastCall = max(timestamp)
    by bin(timestamp, 1h), FunctionName
| extend MinutesSinceLastCall = datetime_diff('minute', now(), LastCall)
| extend
    PerformanceStatus = case(
        AvgMs > 1000, "üî¥ Slow (>1s)",
        AvgMs > 500, "‚ö†Ô∏è Moderate (500ms-1s)",
        "‚úÖ Fast (<500ms)"
    ),
    HealthStatus = case(
        ErrorCount > 0, "üî¥ Has Errors",
        MinutesSinceLastCall > 60, "‚ö†Ô∏è Inactive >1h",
        "‚úÖ Healthy"
    )
| project
    timestamp,
    FunctionName,
    CallCount,
    AvgMs,
    P95Ms,
    MaxMs,
    ErrorCount,
    PerformanceStatus,
    HealthStatus,
    LastCall
| order by timestamp desc, CallCount desc;

//================================================================
// ALTERNATIVE: Summary View (No Time Bins)
//================================================================
// Shows overall stats per function - better for monitoring
//================================================================

/*
let TimeRange = 24h;
traces
| where timestamp > ago(TimeRange)
| extend alObjectId = tostring(customDimensions.alObjectId)
| where alObjectId == "80107"
| extend
    endpoint = tostring(customDimensions.endpoint),
    executionTimeMs = toreal(totimespan(customDimensions.serverExecutionTime))/10000
// Extract function name from endpoint
| extend FunctionName = extract(@"Microsoft\.NAV\.(\w+)", 1, endpoint)
| where isnotempty(FunctionName)
| summarize
    CallCount = count(),
    AvgMs = round(avg(executionTimeMs), 2),
    P50Ms = round(percentile(executionTimeMs, 50), 2),
    P95Ms = round(percentile(executionTimeMs, 95), 2),
    P99Ms = round(percentile(executionTimeMs, 99), 2),
    MaxMs = round(max(executionTimeMs), 2),
    MinMs = round(min(executionTimeMs), 2),
    ErrorCount = countif(severityLevel >= 3),
    LastCall = max(timestamp)
    by FunctionName
| extend
    SuccessRate = round(100.0 - (toreal(ErrorCount) * 100.0 / toreal(CallCount)), 1),
    PerformanceStatus = case(
        AvgMs > 1000, "üî¥ Slow (>1s)",
        AvgMs > 500, "‚ö†Ô∏è Moderate (500ms-1s)",
        "‚úÖ Fast (<500ms)"
    ),
    HealthStatus = case(
        ErrorCount > 10, "üî¥ High Errors",
        ErrorCount > 0, "‚ö†Ô∏è Has Errors",
        "‚úÖ Healthy"
    )
| project
    FunctionName,
    CallCount,
    SuccessRate,
    AvgMs,
    P50Ms,
    P95Ms,
    P99Ms,
    MaxMs,
    MinMs,
    ErrorCount,
    PerformanceStatus,
    HealthStatus,
    LastCall
| order by CallCount desc;
*/

//================================================================
// TEST QUERY: Verify Function Name Extraction
//================================================================
/*
traces
| where timestamp > ago(24h)
| extend alObjectId = tostring(customDimensions.alObjectId)
| where alObjectId == "80107"
| extend
    endpoint = tostring(customDimensions.endpoint),
    FunctionName = extract(@"Microsoft\.NAV\.(\w+)", 1, endpoint)
| summarize
    Count = count(),
    SampleEndpoints = make_set(endpoint, 3)
    by FunctionName
| order by Count desc;
*/
